
/**      Implement a Function in Java which accepts a List of Integer values and
outputs the frequency of each.

 @author Ivan Prusac
*/

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;


public class Problem1 {
    
    public static void main (String[] args){
        
        Scanner in = new Scanner(System.in);
        
        int size;
        int checked = -1;
//      First we gonna propmt user to to input size of the array
        System.out.println("Please enter the size of your array : ");
        
        size = in.nextInt();
        
//      Second we instantiate Array List and populate it      
        List arr = new ArrayList();
        int [] fr = new int [size];
 
        System.out.println("Please populate your array: ");
        for (int i = 0; i<size; i++){
             
             arr.add(i, in.nextInt());
         }
       
//      Using nested for loops we check how many indentical numbers are in array     
        for (int i = 0; i<size; i++){
            for(int j = i+1; j < size; j++){ 
            if(arr.get(i) == arr.get(j)){
//      fr[j] is created to avoid counting the same element again
                fr[j] = checked;
            }
        }
//      Collections.frequency method calculate for us how many times each element occured in array
    int frequency = Collections.frequency(arr, arr.get(i));
    if(fr[i] != checked){
//      Here we print number and number of times it occures in array
    System.out.println(arr.get(i) + " occurs " + frequency + " times.");
    }
}
}
}


/**      Declare and initialise an unsorted Array. Implement a Recursive Function (which
accepts the Array and sum as parameters) to check if it contains four elements
having the given sum.

 @author Ivan Prusac
*/

class Problem2
{
   
   public static boolean FourElementsSumRecursive (int arr[], int n, int X, int i, int j, int k, int l)
    {
        //Reached the end. no sums add up to X
        if(i>=n-3 || j>=n-2 || k>=n-1 || l>=n){
            return false;
        }
        
        //Found a quadruplet
        if (arr[i] + arr[j] + arr[k] + arr[l] == X){
            return true;
        }
        
        
        //Increase i, j, k, l for all combinations
        return FourElementsSumRecursive(arr, n, X, i+1, j, k, l) || FourElementsSumRecursive(arr, n, X, i, j+1, k, l) || FourElementsSumRecursive(arr, n, X, i, j, k+1, l) || FourElementsSumRecursive(arr, n, X, i, j, k, l+1);
    }

    public static void main(String[] args){   
     int[] intArray= {12, 18, 3, 2, 8, 2, 3, 5};
    int X = 35;
        // boolean is true if quadruplet exist
    boolean didFindQuadruplet = FourElementsSumRecursive(intArray, intArray.length, X, 0, 1, 2, 3); 
    System.out.println ("Quadruple exist = " + didFindQuadruplet);
    }
    }



    



/**     Implement the method DeletePairs() which takes an
ArrayList of integers and removes all pairs where the left element is larger than the
right element.

 @author Ivan Prusac
*/

import java.util.ArrayList;


public class Problem3 {

   public void DeletePairs(ArrayList<Integer> arr){

       // first we create for loop, that increment i by 2 because we have pair of integers
   for (int i=0;i<(arr.size()) ;i+=2 ) {
       // if first integer is higher than second we delete that pair and decemrent by 2 to avoid skiping next pair of integers
                if(arr.get(i)>arr.get(i+1)){
                    arr.remove(i);
                    arr.remove(i);
                    i=-2;
                }
            }
}   
   
        // now we will implement DeletePairs () method on this array list 
   public static void main(String[] args){
    Problem3 prob = new Problem3 ();
        ArrayList <Integer> arrlst = new ArrayList<Integer>();
        arrlst.add(3);
        arrlst.add(1);
        arrlst.add(6);
        arrlst.add(5);
        arrlst.add(5);
        arrlst.add(2);
        arrlst.add(7);
        arrlst.add(8);
        arrlst.add(1);
        arrlst.add(2);
        prob.DeletePairs(arrlst);
        System.out.println(arrlst);
    }
}
